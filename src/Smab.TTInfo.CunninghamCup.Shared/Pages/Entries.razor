@page "/entries"
@inject ITournamentService _tournamentService
@rendermode InteractiveServer

<PageTitle>Entries - Cunningham Cup</PageTitle>

<h2>Entries</h2>

<div class="d-flex justify-content-center">
	<QuickGrid Items="@playerEntries?.AsQueryable()">
		<PropertyColumn Title="Name" Property="@(p => p.Name)" Sortable="true" />
		@* <PropertyColumn Title="TTE #" Property="@(p => p.TTEId)" Sortable="true" /> *@
		<PropertyColumn Align="Align.End" Title="Handicap" Property="@(p => p.Handicap)" Sortable="true" />
		<PropertyColumn Title="Group" Property="@(p => p.GroupName)" Sortable="true" />
		@* <PropertyColumn Title="Start time" Property="@(p => p.StartTime)" Sortable="true" /> *@
	</QuickGrid>
</div>

<br />
<p class="d-flex justify-content-center">
	<span><strong>Total Players: @tournament?.ActivePlayers.Count()</strong></span>
</p>
@code {
	public Tournament? tournament { get; set; }
	List<PlayerEntry>? playerEntries;

	protected override void OnInitialized()
	{
		tournament ??= _tournamentService.GetTournament();
		playerEntries ??= [.. tournament.ActivePlayers
		.Select(p => new PlayerEntry(
			p.Name,
			p.Handicap,
			GetGroupNameForPlayer(p.Id),
			GetStartTimeForPlayer(p.Id)
		))
		.OrderBy(pe => pe.Name)
		];
	}

	// Helper method to get group name for a player
	private string GetGroupNameForPlayer(PlayerId playerId)
	{
		Group? group = tournament?.Groups.FirstOrDefault(g => g.Players.Any(pId => pId == playerId));
		return group?.Name ?? string.Empty;
	}

	// Helper method to get start time for a player
	private DateTime? GetStartTimeForPlayer(PlayerId playerId)
	{
		Group? group = tournament?.Groups.FirstOrDefault(g => g.Players.Any(pId => pId == playerId));
		return group?.ScheduledTime;
	}

	private record PlayerEntry(string Name, int? Handicap, string GroupName, DateTime? StartTime);
}