@page "/entries"
@inject ITournamentService _tournamentService

<PageTitle>Entries - Cunningham Cup</PageTitle>

<h2>@tournament?.ActivePlayers.Count() Entries</h2>

<div class="d-flex justify-content-center">
	<QuickGrid Items="@playerEntries?.AsQueryable()" RowClass="GetRowClass">
		<PropertyColumn Title="Name" Property="@(p => p.Name)" Sortable="false" />
		@* <PropertyColumn Title="TTE #" Property="@(p => p.TTEId)" Sortable="true" /> *@
		<PropertyColumn Align="Align.End" Title="Hcap" Property="@(p => p.Handicap)" Sortable="false" />
		<PropertyColumn Title="Group" Property="@(p => p.GroupName)" Sortable="false" />
		@* <PropertyColumn Title="Start time" Property="@(p => p.StartTime)" Sortable="true" /> *@
	</QuickGrid>
</div>
@code {
	public Tournament? tournament { get; set; }
	List<PlayerEntry>? playerEntries;

	protected override void OnInitialized()
	{
		tournament ??= _tournamentService.GetTournament();
		playerEntries ??= [.. tournament.Players.Values
	.Select(p => new PlayerEntry(
		p.Name,
		p.Handicap,
		p.WithDrawn,
		GetGroupNameForPlayer(p.Id),
		GetStartTimeForPlayer(p.Id)
	))
	.OrderBy(pe => pe.Name)
		];
	}

	// Helper method to get group name for a player
	private string GetGroupNameForPlayer(PlayerId playerId)
	{
		Group? group = tournament?.Groups.FirstOrDefault(g => g.Players.Any(pId => pId == playerId));
		return group?.Name ?? string.Empty;
	}

	// Helper method to get start time for a player
	private DateTime? GetStartTimeForPlayer(PlayerId playerId)
	{
		Group? group = tournament?.Groups.FirstOrDefault(g => g.Players.Any(pId => pId == playerId));
		return group?.ScheduledTime;
	}

	private string GetRowClass(PlayerEntry playerEntry)
	{
		return playerEntry.Withdrawn ? "withdrawn" : string.Empty;
	}

	private record PlayerEntry(string Name, int? Handicap, bool Withdrawn, string GroupName, DateTime? StartTime);
}