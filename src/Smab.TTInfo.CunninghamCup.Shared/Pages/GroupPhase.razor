@page "/tournament/groupphase"
@using Smab.TTInfo.CunninghamCup.Shared.Models

<PageTitle>Group Phase</PageTitle>

<h2>Group Phase</h2>

@if (tournament is null)
{
    <p>No tournament loaded.</p>
}
else
{
    @foreach (Group group in tournament.Groups)
    {
        <div class="card mb-4">
            <div class="card-header">
                <strong>@group.Name</strong>
            </div>
            <div class="card-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>PL</th>
                            <th>W</th>
                            <th>D</th>
                            <th>L</th>
                            <th>GM</th>
                            <th>PTS</th>
                            <th>History</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (PlayerId playerId in group.Players)
                        {
                            Player player = tournament.Players.ContainsKey(playerId) ? tournament.Players[playerId] : new Player(playerId, "Unknown");
                            <tr>
                                <td>@player.Name</td>
                                <td>@GetPlayed(group, playerId)</td>
                                <td>@GetWins(group, playerId)</td>
                                <td>@GetDraws(group, playerId)</td>
                                <td>@GetLosses(group, playerId)</td>
                                <td>@GetGames(group, playerId)</td>
                                <td>@GetPoints(group, playerId)</td>
                                <td>@GetHistory(group, playerId)</td>
                            </tr>
                        }
                    </tbody>
                </table>
                <h4>Matches</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Player A</th>
                            <th>Player B</th>
                            <th>Score</th>
                            <th>Edit</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (Match match in group.Matches)
                        {
                            string playerAName = tournament.Players.ContainsKey(match.PlayerA) ? tournament.Players[match.PlayerA].Name : match.PlayerA.ToString();
                            string playerBName = tournament.Players.ContainsKey(match.PlayerB) ? tournament.Players[match.PlayerB].Name : match.PlayerB.ToString();
                            string score = match.Result is not null
                                ? $"{match.Result.PlayerASets}-{match.Result.PlayerBSets} ({string.Join(", ", match.Result.Sets.Select(s => $"{s.PlayerAScore}-{s.PlayerBScore}"))})"
                                : "-";
                            <tr>
                                <td>@playerAName</td>
                                <td>@playerBName</td>
                                <td>@score</td>
                                <td>
                                    <button class="btn btn-primary" @onclick="() => EditMatch(match)">Edit</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AdvanceToKnockout">Advance Top Players</button>
}

@code {
    [Parameter] public Tournament? tournament { get; set; }

    private int GetPlayed(Group group, PlayerId playerId) => 0; // TODO
    private int GetWins(Group group, PlayerId playerId) => 0; // TODO
    private int GetDraws(Group group, PlayerId playerId) => 0; // TODO
    private int GetLosses(Group group, PlayerId playerId) => 0; // TODO
    private int GetGames(Group group, PlayerId playerId) => 0; // TODO
    private int GetPoints(Group group, PlayerId playerId) => 0; // TODO
    private string GetHistory(Group group, PlayerId playerId) => ""; // TODO

    private void EditMatch(Match match)
    {
        // TODO: Show match editor dialog
    }

    private void AdvanceToKnockout()
    {
        // TODO: Select top players and navigate to KnockoutDraw page
    }
}
