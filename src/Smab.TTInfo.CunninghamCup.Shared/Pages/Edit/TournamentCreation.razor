@page "/edit/create"
@inject ITournamentService _tournamentService
@rendermode InteractiveServer

<PageTitle>Create Tournament</PageTitle>

<h2>Create Tournament - Cunningham Cup</h2>

<CantEdit>
	<div class="alert alert-danger">Permission denied</div>
</CantEdit>

<CanEdit>
<EditForm Model="tournamentModel" OnValidSubmit="UpdateTournament" FormName="tForm">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-3">
		<label>Tournament Name</label>
		<InputText @bind-Value="tournamentModel.Name" class="form-control" />
	</div>
	<div class="mb-3">
		<label>Date</label>
		<InputDate @bind-Value="tournamentModel.Date" class="form-control" />
	</div>
	<h3>Players</h3>
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>TTE #</th>
				<th>Handicap</th>
				<th>Withdrawn</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (PlayerEditModel player in tournamentModel.Players) {
				<tr>
					<td><InputText placeholder="Name" @bind-Value="player.Name" class="form-control" autocomplete="off" /></td>
					<td><InputNumber @bind-Value="player.TTEId" class="form-control" autocomplete="off" /></td>
					<td><InputNumber @bind-Value="player.Handicap" class="form-control" autocomplete="off" /></td>
					<td><InputCheckbox @bind-Value="player.Withdrawn" class="" autocomplete="off" /></td>
					<td><button type="button" class="btn btn-danger" @onclick="() => RemovePlayer(player)">Remove</button></td>
				</tr>
			}
		</tbody>
	</table>
	<button type="button" class="btn btn-primary" @onclick="AddPlayer">Add Player</button>
	<br /><br />
	<button type="button" class="btn btn-primary" @onclick="CreateTournament">Create tournament</button>
	<button type="submit" class="btn btn-success">Update tournament</button>
	<button type="button" class="btn btn-warning" @onclick="SaveTournament">Save tournament</button>
	<br /><br />
</EditForm>

<br />

<EditForm FormName="seedForm" Model="seedEditModel">
	<table>
		<tr>
			<td><InputNumber title="No of players" @bind-Value="seedEditModel.NumPlayers" class="form-control d-inline m-1" /></td>
			<td><InputNumber title="No of groups" @bind-Value="seedEditModel.NumGroups" class="form-control d-inline m-1" /></td>
			<td><button type="button" class="btn btn-success mx-1" @onclick="ReDrawGroups">Draw Groups</button></td>
			<td><button type="submit" class="btn btn-warning mx-2" @onclick="RandomTournament">Seed random tournament</button></td>
		</tr>
	</table>
</EditForm>
</CanEdit>

@code {
	private TournamentEditModel tournamentModel = new()
		{
			Name = string.Empty,
			Date = DateOnly.FromDateTime(DateTime.Today)
		};

	private SeedEditModel seedEditModel = new();

	[Parameter]
	[PersistentState]
	public Tournament? tournament { get; set; } = default;


	protected override void OnInitialized()
	{
		tournament ??= _tournamentService.GetTournament();
		tournamentModel.Name = tournament.Name;
		tournamentModel.Date = tournament.Date;
		tournamentModel.Players = tournament.Players
			.Select(p => new PlayerEditModel {
				Name = p.Value.Name,
				Handicap = p.Value.Handicap,
				Withdrawn = p.Value.WithDrawn,
				TTEId = p.Value.TTEId
			}).ToList();

		seedEditModel.NumPlayers = tournamentModel.Players.Count;
	}

	private void AddPlayer()
	{
		tournamentModel.Players.Add(new PlayerEditModel { Name = string.Empty, Handicap = 0 });
		seedEditModel.NumPlayers = tournamentModel.Players.Count;
		StateHasChanged();
	}

	private void RemovePlayer(PlayerEditModel player)
	{
		tournamentModel.Players.Remove(player);
		seedEditModel.NumPlayers = tournamentModel.Players.Count;
		StateHasChanged();
	}

	private async Task SaveTournament()
	{
		await _tournamentService.SaveTournamentToJsonAsync();	
	}

	private void UpdateTournament()
	{
		if (tournament is null)
		{
			tournament = Tournament.Create(tournamentModel.Name, tournamentModel.Date);
		}
		else
		{
			tournament = tournament with { Name = tournamentModel.Name, Date = tournamentModel.Date };
		}

		// Convert TournamentEditModel to Tournament
		List<Player> players = [..
		tournamentModel.Players
		.Select(p => Player.Create(p.Name, p.Handicap, p.TTEId, p.Withdrawn))];

		tournament = tournament!.AddOrUpdatePlayers([.. players]);
		tournament = tournament with
			{
				Name = tournamentModel.Name,
				Date = tournamentModel.Date
			};
		_tournamentService.AddOrUpdateTournament(tournament);
	}

	private void CreateTournament(MouseEventArgs args)
	{
		tournament = Tournament.Create(tournamentModel.Name, tournamentModel.Date);
		tournament = tournament.AddOrUpdatePlayers(
			[.. tournamentModel.Players
			.Select(p => Player.Create(p.Name, p.Handicap, p.TTEId, p.Withdrawn))]);
		_tournamentService.AddOrUpdateTournament(tournament);
		tournament = _tournamentService.GetTournament();
		OnInitialized();
	}

	private void ReDrawGroups(MouseEventArgs args)
	{
		tournament = Tournament.Create(tournamentModel.Name, tournamentModel.Date);
		tournament = tournament.AddOrUpdatePlayers(
			[.. tournamentModel.Players
			.Select(p => Player.Create(p.Name, p.Handicap, p.TTEId, p.Withdrawn))]);
		_tournamentService.AddOrUpdateTournament(tournament);
		_tournamentService.DrawGroups(seedEditModel.NumGroups);
		tournament = _tournamentService.GetTournament();
		OnInitialized();
	}

	private void RandomTournament(MouseEventArgs args)
	{
		_tournamentService
		.SeedRandomTournament(seedEditModel.NumPlayers)
		.DrawGroups(seedEditModel.NumGroups);
		tournament = _tournamentService.GetTournament();
		OnInitialized();
	}

	public class TournamentEditModel
	{
		[Required]
		public string Name { get; set; } = string.Empty;
		[Required]
		public DateOnly Date { get; set; } = DateOnly.FromDateTime(DateTime.Today);
		public List<PlayerEditModel> Players { get; set; } = [];
	}

	public class PlayerEditModel
	{
		[Required]
		public string Name { get; set; } = string.Empty;
		public int? Handicap { get; set; }
		public int? TTEId { get; set; }
		public bool Withdrawn { get; set; }
	}

	public class SeedEditModel
	{
		public int NumPlayers { get; set; } = 16;
		public int NumGroups { get; set; } = 4;
	}
}
