@page "/knockout"
@using Smab.TTInfo.CunninghamCup.Shared.Models
@inject ITournamentService _tournamentService
@rendermode InteractiveServer

<PageTitle>Knockout Draw - @tournament?.Name</PageTitle>

<h2>Knockout Draw</h2>

@if (tournament?.Groups is null || tournament?.Groups.Count == 0 ) {
	<div class="alert alert-info">
		<h3>No Groups Available</h3>
		<p>Groups have not been drawn yet, so it's too early to prepare the <em>Knockout Draw</em>.</p>
	</div>
} else if (tournament.KnockoutStage is null) {
	<dl>
	@foreach(Group group in tournament.Groups) {
		if (group.IsCompleted) {
				<dt>@group.Name Winner</dt>
				<dd>@group.GroupPositions[0].PlayerId.DisplayName</dd>
				<dt>@group.Name Runner-up</dt>
				<dd>@group.GroupPositions[1].PlayerId.DisplayName</dd>
		} else {
				<dt>@group.Name</dt>
				<dd>Group not completed yet.</dd>
		}
	}
	</dl>
	<CanEdit>
		<button class="btn btn-success" @onclick="ConfirmKnockoutDraw">Confirm & Generate Bracket</button>
	</CanEdit>
} else {
	<h4>Knockout Players</h4>
	<ul>
		@foreach (Match match in tournament.KnockoutStage.Rounds[0].Matches) {
			Player? playerA = match.PlayerA.IsPlayer ? tournament.GetPlayer(match.PlayerA) : null;
			Player? playerB = match.PlayerB.IsPlayer ? tournament.GetPlayer(match.PlayerB) : null;
			if (playerA is not null)
			{
				<li>@playerA.Id.DisplayName (@playerA.Handicap)</li>
			} else {
				<li>@match.PlayerA.DisplayName</li>
			}
			if (playerB is not null)
			{
				<li>@playerB.Id.DisplayName (@playerB.Handicap)</li>
			} else {
				<li>@match.PlayerB.DisplayName</li>
			}
		}
	</ul>
	<CanEdit>
		<button class="btn btn-success" @onclick="UpdateBracket">Update Bracket</button>
	</CanEdit>
}

@code {
	[PersistentState]
	[Parameter] public Tournament? tournament { get; set; }

	protected override void OnInitialized()
	{
		tournament ??= _tournamentService.GetTournament();
	}

	private void ConfirmKnockoutDraw()
	{
		tournament = _tournamentService.DrawKnockoutStage();
		tournament = _tournamentService.UpdateKnockoutPhases();
		StateHasChanged();
	}

	private void UpdateBracket()
	{
		tournament = _tournamentService.UpdateKnockoutPhases();
		StateHasChanged();
	}
}
