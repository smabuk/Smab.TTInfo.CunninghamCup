@page "/knockout"
@using Smab.TTInfo.CunninghamCup.Shared.Models
@inject ITournamentService _tournamentService
@rendermode InteractiveServer

<PageTitle>Knockout Draw</PageTitle>

<h2>Knockout Draw</h2>

@if (tournament is null) {
	<p>No knockout stage available.</p>
} else if (tournament.KnockoutStage is null) {
	@foreach(Group group in tournament.Groups) {
		if (group.IsCompleted) {
			<h4>Group @group.Name Qualifiers</h4>
			<ul>
				<li>@group.GroupPositions[0].PlayerId.DisplayName</li>
				<li>@group.GroupPositions[1].PlayerId.DisplayName</li>
			</ul>
		}
	}
	<p>No knockout stage available.</p>
	<button class="btn btn-success" @onclick="ConfirmKnockoutDraw">Confirm & Generate Bracket</button>
} else {
	<h4>Knockout Players</h4>
	<ul>
		@foreach (PlayerId playerId in tournament.KnockoutStage.Rounds[0].Matches.SelectMany(m => new[] { m.PlayerA, m.PlayerB }).Distinct()) {
			string playerName = playerId.DisplayName;
			<li>@playerName</li>
		}
	</ul>
}

@code {
	[PersistentState]
	[Parameter] public Tournament? tournament { get; set; }

	protected override void OnInitialized()
	{
		tournament ??= _tournamentService.GetTournament();
	}

	private void ConfirmKnockoutDraw()
	{
		tournament = _tournamentService.DrawKnockoutStage();
		tournament = _tournamentService.UpdateKnockoutPhases();
		tournament ??= _tournamentService.GetTournament();
		StateHasChanged();
	}
}
